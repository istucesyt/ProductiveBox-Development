//
//  ContentView.swift
//  ProductiveBox
//
//  Created by Lucas Drouot on 25/11/2023.
//  Updated on 20/12/2023.
//

import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Spacer(minLength: 20)
            
            Text("Bienvenue dans")
                .bold()
            HStack {
                Image(systemName: "laurel.leading")
                    .foregroundColor(Color.accentColor)
                Text("ProductiveBox")
                    .font(.largeTitle)
                    .bold()
                Image(systemName: "laurel.trailing")
                    .foregroundColor(Color.accentColor)
            }
            Text("2024")
                .font(.title3)
                .foregroundColor(Color.accentColor)
                .bold()
            
            Spacer()
            
            VStack {
                Text("D√©couvrez le propre de chaque symbole :\n")
                        
                HStack  {
                    Button(action: {
                        Tipüêû().openInWindow(title: "√Ä propos du symbole üêû", sender: self)
                    }) {
                        Text("üêû")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                
                    Button(action: {
                        Tipü¶ã().openInWindow(title: "√Ä propos du symbole ü¶ã", sender: self)
                    }) {
                        Text("ü¶ã")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                    
                    Button(action: {
                        Tipüêõ().openInWindow(title: "√Ä propos du symbole üêõ", sender: self)
                    }) {
                        Text("üêõ")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                    
                    Button(action: {
                        Tipü™≤().openInWindow(title: "√Ä propos du symbole ü™≤", sender: self)
                    }) {
                        Text("ü™≤")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                    
                    Button(action: {
                        Tipüêú().openInWindow(title: "√Ä propos du symbole üêú", sender: self)
                    }) {
                        Text("üêú")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                    
                    Button(action: {
                        Tipüê≥().openInWindow(title: "√Ä propos du symbole üê≥", sender: self)
                    }) {
                        Text("üê≥")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                    
                    Button(action: {
                        Tipü¶ä().openInWindow(title: "√Ä propos du symbole ü¶ä", sender: self)
                    }) {
                        Text("ü¶ä")
                            .font(.largeTitle)
                            .padding(5)
                    }
                    .cornerRadius(15)
                }
                .padding(15)
            }
            
            Spacer()
            
            Button(action: {
                Settings().openInWindow(title: "Param√®tres et infos", sender: self)
            }) {
                HStack {
                    Image(systemName: "circle.hexagonpath")
                        .foregroundColor(Color.accentColor)
                    Text("Param√®tres et infos  ")
                        .foregroundColor(Color.accentColor)
                }
                .padding(5)
            }
            .cornerRadius(15)
            
            Button(action: {
                hideMainWindow()
            }) {
                HStack {
                    Image(systemName: "eye.slash")
                    Text("Masquer")
                        .font(.system(size: 12, weight: .regular))
                        .foregroundColor(.primary)
                }
                .padding(5)
            }
            .buttonStyle(DefaultButtonStyle())
            .cornerRadius(50)
            
            VStack {
                DisclosureGroup("R√©seaux") {
                    HStack {
                        HStack {
                            Button(action: {
                                discord()
                            }) {
                                HStack {
                                    Text("Rejoindre le serveur Discord   ")
                                        .font(.system(size: 12, weight: .regular))
                                        .foregroundColor(.primary)
                                    
                                    Image(systemName: "message")
                                }
                                .padding(5)
                            }
                            .buttonStyle(DefaultButtonStyle())
                            .cornerRadius(10)
                        }
                        
                        HStack {
                            Button(action: {
                                youtube()
                            }) {
                                HStack {
                                    Text("S'abonner √† la cha√Æne    ")
                                        .font(.system(size: 12, weight: .regular))
                                        .foregroundColor(.primary)
                                    Image(systemName: "play.tv")
                                }
                                .padding(5)
                            }
                            .buttonStyle(DefaultButtonStyle())
                            .cornerRadius(10)
                        }
                    }
                    .padding(5)
                }
                .padding(.vertical, 5)
                .padding(.horizontal, 20)
                .background(Color.accentColor.opacity(0.2))
                .cornerRadius(15)
            }
            .padding(20)
        }
        .frame(minWidth: 550, idealWidth: 550, minHeight: 400, idealHeight: 400)
    }
    
    func hideMainWindow() {
        NSApplication.shared.hide(nil)
    }
    
    func discord() {
        if let url = URL(string: "https://tinyurl.com/ProductiveBox-Discord") {
            NSWorkspace.shared.open(url)
        }
    }
    
    func youtube() {
        if let url = URL(string: "https://www.youtube.com/@productiveboxproject") {
            NSWorkspace.shared.open(url)
        }
    }
}

extension View {
    @discardableResult
    func openInWindow(title: String, sender: Any?) -> NSWindow {
        let controller = NSHostingController(rootView: self)
        let win = NSWindow(contentViewController: controller)
        win.contentViewController = controller
        win.title = title
        win.makeKeyAndOrderFront(sender)
        win.titleVisibility = .visible
        win.titlebarAppearsTransparent = true
        win.standardWindowButton(.closeButton)?.isHidden = false
        win.standardWindowButton(.zoomButton)?.isHidden = true
        win.standardWindowButton(.miniaturizeButton)?.isHidden = true
        return win
    }
}

struct Tipüêû: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole coccinelle üêû\n\n")
                
                VStack {
                    Text("La coccinelle est l√©g√®re et intelligente. Par ses services puissants de recherche rapide, elle devient votre associ√©e principale.")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" recherche rapide sur Internet")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" ouverture dans une zone ancr√©e ; barre d'outils")
                }
            
            Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
    }
}

struct Tipü¶ã: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole papillon ü¶ã\n\n")
                
                VStack {
                    Text("Le papillon est un insecte gracieux, dot√© d'une particularit√© math√©matique : ses ailes sont sym√©triques.")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" √©cran scind√©, deux applications simultan√©es")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" gestion des fen√™tres")
                }
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
    }
}

struct Tipüêõ: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole chenille üêõ\n\n")
                
                VStack {
                    Text("La chenille adore grignoter feuilles et petites plantes. Avant qu'elle ne grignote l'√©cran de votre Mac, effectuez une capture d'√©cran !")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" capture d'√©cran / enregistrement d'√©cran")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" services syst√®mes")
                }
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
    }
}

struct Tipü™≤: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole scarab√© ü™≤\n\n")
                
                VStack {
                    Text("Le scarab√© appr√©cie la tranquilit√©. Il est calme et d√©tendu. ''J'ai activ√© Ne pas d√©ranger sur mon Mac, le son des nouvelles notifications me r√©veille !''.")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" activer / d√©sactiver le mode Ne pas d√©ranger")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" services syst√®mes")
                }
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
    }
}

struct Tipüêú: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole fourmi üêú\n\n")
                
                VStack {
                    Text("La fourmi est curieuse, elle ne peut s'emp√™cher de chercher (et de trouver).")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" afficher le s√©lecteur d'Emojis")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" services syst√®mes")
                }
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 450, idealHeight: 450)
    }
}

struct Tipüê≥: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole baleine üê≥\n\n")
                
                VStack {
                    Text("La baleine est puissante et in√©puisable. Elle prendra soin de votre Mac afin qu'il soit aussi rapide que son jet.")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" lib√©rer de la RAM")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" services de maintenance du syst√®me")
                }
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
    }
}

struct Tipü¶ä: View {
    var body: some View {
        VStack {
                Spacer()
                
                Text("Aide :")
                    .font(.largeTitle)
                Text("Symbole renard ü¶ä\n\n")
                
                VStack {
                    Text("Le renard est rus√©. Se fondre dans le d√©cor est pour lui d'une facilit√© divine.")
                }
                
                VStack {
                    Text("\n\nFonction associ√©e :")
                        .font(.headline)
                    
                    Text(" afficher le Bureau / retour aux fen√™tres")
                }
                
                VStack {
                    Text("\nType d'action :")
                        .font(.headline)
                    Text(" gestion des fen√™tres")
                }
            
                Spacer()
        }
        .padding(20)
        .padding(20)
        .frame(minWidth: 350, idealWidth: 350, minHeight: 400, idealHeight: 400)
    }
}

struct Settings: View {
    @AppStorage("altIcons") var altIcons: Bool = false
    
    var body: some View {
        VStack {
            Spacer()
            
            Text("Lancer automatiquement au d√©marrage :")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary)
            VStack {
                HStack {
                    VStack {
                        Image("Tuto1")
                            .resizable()
                            .scaledToFit()
                            .cornerRadius(10)
                        Text("1")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.primary)
                    }
                    VStack {
                        Image("Tuto2")
                            .resizable()
                            .scaledToFit()
                            .cornerRadius(10)
                        Text("2")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.primary)
                    }
                }
                
                Spacer()
                
                Text("Afin de permettre √† ProductiveBox de se lancer automatiquement au d√©marrage, effectuez un clic-droit sur son ic√¥ne dans le Dock (1), survolez ''Options'' puis s√©lectionnez ''Ouvrir avec la session'' (2). R√©p√©tez l'op√©ration pour d√©sactiver le lancement automatique.\n\n‚ö†Ô∏è ProductiveBox est en d√©veloppement. L'activation du lancement au d√©marrage n'est pas recommand√©e.")
                    .font(.system(size: 10, weight: .regular))
                    .foregroundColor(.primary)
            }
            
            Spacer(minLength: 20)
            
            Text("Symboles alternatifs :")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary)
            Button(action: {}) {
                Image(systemName: "alt")
                Text("Activer les symboles alternatifs ")
                    .font(.system(size: 12, weight: .regular))
                    .foregroundColor(.primary)
                Toggle("", isOn: $altIcons)
                    .toggleStyle(.switch)
                    .controlSize(.mini)
                    .padding(5)
            }
            .buttonStyle(DefaultButtonStyle())
            .cornerRadius(50)
            Text("Remplace les insectes dans la barre d'outils")
                .font(.system(size: 10, weight: .regular))
                .foregroundColor(.primary)
            
            Spacer(minLength: 20)
            
            Text("Mise √† jour :")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary)
            Button(action: {}) {
                Image(systemName: "checkmark.icloud")
                Text("V√©rifier les M√†Js ")
                    .font(.system(size: 12, weight: .regular))
                    .foregroundColor(.primary)
            }
            .buttonStyle(DefaultButtonStyle())
            .cornerRadius(50)
            .disabled(true)
            Text("Vous utilisez la version")
                .font(.system(size: 10, weight: .regular))
                .foregroundColor(.primary)
            +
            Text(" n0 [development]")
                .font(.system(size: 10, weight: .medium))
                .foregroundColor(.primary)
            
            Spacer(minLength: 20)
            
            Text("Discord :")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary)
            Button(action: {
                discord()
            }) {
                Image(systemName: "message")
                Text("Rejoindre le serveur ")
                    .font(.system(size: 12, weight: .regular))
                    .foregroundColor(.primary)
            }
            .buttonStyle(DefaultButtonStyle())
            .cornerRadius(50)
            
            Spacer(minLength: 20)
            
            Text("YouTube :")
                .font(.system(size: 12, weight: .medium))
                .foregroundColor(.primary)
            Button(action: {
                discord()
            }) {
                Image(systemName: "play.tv")
                Text("S'abonner √† la cha√Æne ")
                    .font(.system(size: 12, weight: .regular))
                    .foregroundColor(.primary)
            }
            .buttonStyle(DefaultButtonStyle())
            .cornerRadius(50)
            
            Spacer()
        }
        .frame(minWidth: 400, minHeight: 550)
        .padding(20)
    }
    
    func discord() {
        if let url = URL(string: "https://tinyurl.com/ProductiveBox-Discord") {
            NSWorkspace.shared.open(url)
        }
    }
    
    func youtube() {
        if let url = URL(string: "https://www.youtube.com/@productiveboxproject") {
            NSWorkspace.shared.open(url)
        }
    }
}

#Preview {
    ContentView()
}

#Preview {
    Tipüêû()
}

#Preview {
    Tipü¶ã()
}

#Preview {
    Tipüêõ()
}

#Preview {
    Tipü™≤()
}

#Preview {
    Tipüêú()
}

#Preview {
    Tipüê≥()
}

#Preview {
    Tipü¶ä()
}

#Preview {
    Settings()
}


